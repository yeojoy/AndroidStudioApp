apply plugin: 'com.android.application'

// get VersionName in AndroidManifest.xml
// manifest element 안에 android:versionName이 있어야 동작함.
// AndroidStudio로 처음 생성하면 이 필드가 없음.
def getVersionNameInManifest() {
    def manifestFile = file(project.projectDir.absolutePath + '/src/main/AndroidManifest.xml')
    def nameSpace = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)

    return xml.attributes()[nameSpace.versionName].toString()
}

project.ext.versionName = getVersionNameInManifest()

android {
    signingConfigs {
        release {
            storeFile file('/Users/yeojoy/my_key.jks')
            keyAlias 'my_key'
            keyPassword 'my_key'
            storePassword 'my_key'
        }

        debug {
            storeFile file('/Users/yeojoy/.android/debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'

            project.archivesBaseName = 'my_test_app'
        }

    }
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        applicationId "me.yeojoy.testapp"
        minSdkVersion 18
        targetSdkVersion 21
        versionCode 1
        versionName "1.0.0"
        applicationVariants.all { variant ->
            // In Android Studio VER 1.0, Must add below lines.
            variant.outputs.each { output ->
                def file = output.outputFile
                output.outputFile = new File(file.parent, file.name.replace(".apk", "-" + project.ext.versionName + ".apk"))
            } 
        }
    }
    buildTypes {
        def VERSION_NAME = defaultConfig.versionName
        def VERSION_CODE = defaultConfig.versionCode

        release {
            versionNameSuffix "-rrrr"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "String", "APP_VERSION_NAME", defaultConfig.versionName
            buildConfigField "int", "APP_VERSION_CODE", defaultConfig.versionCode

        }

        debug {
            versionNameSuffix "-dddd"
            signingConfig signingConfigs.debug
            buildConfigField "String", "APP_VERSION_NAME", defaultConfig.versionName
            buildConfigField "int", "APP_VERSION_CODE", defaultConfig.versionCode

        }
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {
        flavor_dddd {
            minSdkVersion 18
            applicationId 'me.yeojoy.testapp'
            signingConfig signingConfigs.debug
            targetSdkVersion 21
        }

        flavor_release {
            minSdkVersion 18
            applicationId 'me.yeojoy.testapp'
            signingConfig signingConfigs.release
            targetSdkVersion 21
        }
    }
}

dependencies {
    //    compile fileTree(dir: '../libs', include: ['*.jar'])
    compile files('../libs/gson-2.3.1.jar')
    compile 'com.android.support:appcompat-v7:21.0.2'
    compile 'com.google.android.gms:play-services:6.5.87'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
    compile project(':my_lib')
}

// set variable dynamically
def runTasks = gradle.startParameter.taskNames
if ('assemble' in runTasks | 'assembleRelease' in runTasks) {
    //android.signingConfigs.release.storePassword = System.console().readPassword('\nKeyStore Password: ')
    //android.signingConfigs.release.keyAlias = System.console().readPassword('\nAlias Name: ')
    //android.signingConfigs.release.keyPassword = System.console().readPassword('\nAlias Password: ')
} else if ('assembleDebug' in runTasks) {
    //android.signingConfigs.debug.storePassword = System.console().readPassword('\nDebug KeyStore Password: ')
    //android.signingConfigs.debug.keyAlias = System.console().readPassword('\nDebug Alias Name: ')
    //android.signingConfigs.debug.keyPassword = System.console().readPassword('\nDebug Alias Password: ')
}
